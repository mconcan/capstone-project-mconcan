} else { #shot from behind center line
event_dist = sqrt((abs(xC) + 89)^2+(yC)^2)
}
return(event_dist)
}
#document this
calculate_angle <- function(frame_row) {
event_angle = 0
xC = as.numeric(frame_row[17])
yC = as.numeric(frame_row[18])
if(frame_row[8] == "Off") {
event_angle = abs(atan(yC / (89 - abs(xC))) * (180 / pi))
} else {
event_angle = abs(atan(yC / (abs(xC + 89))) * (180 / pi))
}
return(event_angle)
}
test_data$distance =  apply(test_data, 1, function(x) calculate_distance(x))
test_data$angle = apply(test_data, 1, function(x) calculate_angle(x))
num_rows = nrow(test_data)
metrics = data.frame(
xC_last = rep(NA, num_rows),
yC_last = rep(NA, num_rows),
distance_from_last = rep(NA, num_rows),
seconds_since_last = rep(NA, num_rows),
prior_team_shot = rep(NA, num_rows),
prior_team_miss = rep(NA, num_rows),
prior_team_block = rep(NA, num_rows),
prior_team_give = rep(NA, num_rows),
prior_team_take = rep(NA, num_rows),
prior_team_hit = rep(NA, num_rows),
prior_opp_shot = rep(NA, num_rows),
prior_opp_miss = rep(NA, num_rows),
prior_opp_block = rep(NA, num_rows),
prior_opp_give = rep(NA, num_rows),
prior_opp_take = rep(NA, num_rows),
prior_opp_hit = rep(NA, num_rows),
prior_face_win = rep(NA, num_rows),
prior_face_loss = rep(NA, num_rows),
is_home = rep(NA, num_rows),
wrist = rep(NA, num_rows),
deflection = rep(NA, num_rows),
tip = rep(NA, num_rows),
slap = rep(NA, num_rows),
backhand = rep(NA, num_rows),
snap = rep(NA, num_rows),
wrap = rep(NA, num_rows),
goal = rep(NA, num_rows),
goal_dif = rep(NA, num_rows),
graph_xC = rep(NA, num_rows),
graph_yC = rep(NA, num_rows))
for(j in 2:nrow(test_data)) {
if(test_data[j,]$Period == test_data[j-1,]$Period && (test_data[j,]$Event != 'FAC' || test_data[j,]$Event != 'HIT' || test_data[j,]$Event != 'GIVE' || test_data[j,]$Event != 'TAKE')) { #can only compare test_data from same game and period
metrics$xC_last[j] = test_data$xC[j-1]
metrics$yC_last[j] = test_data$yC[j-1]
metrics$distance_from_last[j] = sqrt((as.numeric(test_data[j,]$xC) - as.numeric(metrics$xC_last[j]))^2 + (as.numeric(test_data[j,]$yC) - as.numeric(metrics$yC_last[j]))^2)
metrics$seconds_since_last[j] = as.numeric(test_data[j,]$Seconds_Elapsed) - as.numeric(test_data[j-1,]$Seconds_Elapsed)
metrics$prior_team_shot[j] = ((test_data[j-1, ]$Event == 'SHOT') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_shot[j] = ((test_data[j-1, ]$Event == 'SHOT') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_block[j] = ((test_data[j-1, ]$Event == 'BLOCK') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_block[j] = ((test_data[j-1, ]$Event == 'BLOCK') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_miss[j] = ((test_data[j-1, ]$Event == 'MISS') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_miss[j] = ((test_data[j-1, ]$Event == 'MISS') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_give[j] = ((test_data[j-1, ]$Event == 'GIVE') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_give[j] = ((test_data[j-1, ]$Event == 'GIVE') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_take[j] = ((test_data[j-1, ]$Event == 'TAKE') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_take[j] = ((test_data[j-1, ]$Event == 'TAKE') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_hit[j] = ((test_data[j-1, ]$Event == 'HIT') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_hit[j] = ((test_data[j-1, ]$Event == 'HIT') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_face_win[j] = ((test_data[j-1, ]$Event == 'FAC') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_face_loss[j] = ((test_data[j-1, ]$Event == 'FAC') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$is_home[j] = (test_data[j,]$Ev_Team == test_data[j,]$Home_Team)
metrics$wrist[j] = (test_data[j,]$Type == 'WRIST SHOT')
metrics$deflection[j] = (test_data[j,]$Type == 'DEFLECTION')
metrics$tip[j] = (test_data[j,]$Type == 'TIP-IN')
metrics$slap[j] = (test_data[j,]$Type == 'SLAP SHOT')
metrics$backhand[j] = (test_data[j,]$Type == 'BACKHAND')
metrics$snap[j] = (test_data[j,]$Type == 'SNAP SHOT')
metrics$wrap[j] = (test_data[j,]$Type == 'WRAP-AROUND')
metrics$goal[j] = (test_data[j,]$Event == 'GOAL')
metrics$goal_dif[j] = test_data[j, ]$Home_Score - test_data[j,]$Away_Score
if(test_data[j,]$Period == '2') {
metrics$graph_xC[j] = -test_data[j,]$xC
} else {
metrics$graph_xC[j] = test_data[j,]$xC
}
metrics$graph_yC[j] = test_data[j,]$yC
}
}
test_data = read_csv("nhl_pbp_2017-10-04--2017-10-04.csv")
c_drop <- c("X1", "p1_ID", "p2_name", "p2_ID", "p3_name", "p3_ID", "awayPlayer1", "awayPlayer1_id",
"awayPlayer2", "awayPlayer2_id", "awayPlayer3", "awayPlayer3_id", "awayPlayer4", "awayPlayer4_id",
"awayPlayer5", "awayPlayer5_id", "awayPlayer6", "awayPlayer6_id", "homePlayer1", "homePlayer1_id",
"homePlayer2", "homePlayer2_id", "homePlayer3", "homePlayer3_id", "homePlayer4", "homePlayer4_id",
"homePlayer5", "homePlayer5_id", "homePlayer6", "homePlayer6_id", "Away_Goalie", "Away_Goalie_Id",
"Home_Goalie", "Home_Goalie_Id", "Home_Coach", "Away_Coach", "Away_Players", "Home_Players", "Game_Id")
event_drop <- c("PSTR", "PGSTR", "ON", "OFF", "STOP", "PENL", "PEND", "GEND")
strength_keep <- c("5x5")
test_data = test_data[(test_data$Home_Team == 'WPG') | (test_data$Away_Team == 'WPG'), ]
test_data = test_data[,!(names(test_data) %in% c_drop)]
test_data= test_data[!test_data$Event %in% event_drop, ]
test_data = test_data[test_data$Strength %in% strength_keep, ]
test_data = test_data[!is.na(test_data$xC), ]
test_data = test_data[!is.na(test_data$yC), ]
test_data = test_data[!is.na(test_data$Ev_Zone), ]
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
source('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/process_data.R')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
source('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/process_data.R')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
traceback()
test_data$distance =  apply(test_data, 1, function(x) calculate_distance(x))
test_data$angle = apply(test_data, 1, function(x) calculate_angle(x))
num_rows = nrow(test_data)
metrics = data.frame(
xC_last = rep(NA, num_rows),
yC_last = rep(NA, num_rows),
distance_from_last = rep(NA, num_rows),
seconds_since_last = rep(NA, num_rows),
prior_team_shot = rep(NA, num_rows),
prior_team_miss = rep(NA, num_rows),
prior_team_block = rep(NA, num_rows),
prior_team_give = rep(NA, num_rows),
prior_team_take = rep(NA, num_rows),
prior_team_hit = rep(NA, num_rows),
prior_opp_shot = rep(NA, num_rows),
prior_opp_miss = rep(NA, num_rows),
prior_opp_block = rep(NA, num_rows),
prior_opp_give = rep(NA, num_rows),
prior_opp_take = rep(NA, num_rows),
prior_opp_hit = rep(NA, num_rows),
prior_face_win = rep(NA, num_rows),
prior_face_loss = rep(NA, num_rows),
is_home = rep(NA, num_rows),
wrist = rep(NA, num_rows),
deflection = rep(NA, num_rows),
tip = rep(NA, num_rows),
slap = rep(NA, num_rows),
backhand = rep(NA, num_rows),
snap = rep(NA, num_rows),
wrap = rep(NA, num_rows),
goal = rep(NA, num_rows),
goal_dif = rep(NA, num_rows),
graph_xC = rep(NA, num_rows),
graph_yC = rep(NA, num_rows))
for(j in 2:nrow(test_data)) {
if(test_data[j,]$Period == test_data[j-1,]$Period && (test_data[j,]$Event != 'FAC' || test_data[j,]$Event != 'HIT' || test_data[j,]$Event != 'GIVE' || test_data[j,]$Event != 'TAKE')) { #can only compare test_data from same game and period
metrics$xC_last[j] = test_data$xC[j-1]
metrics$yC_last[j] = test_data$yC[j-1]
metrics$distance_from_last[j] = sqrt((as.numeric(test_data[j,]$xC) - as.numeric(metrics$xC_last[j]))^2 + (as.numeric(test_data[j,]$yC) - as.numeric(metrics$yC_last[j]))^2)
metrics$seconds_since_last[j] = as.numeric(test_data[j,]$Seconds_Elapsed) - as.numeric(test_data[j-1,]$Seconds_Elapsed)
metrics$prior_team_shot[j] = ((test_data[j-1, ]$Event == 'SHOT') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_shot[j] = ((test_data[j-1, ]$Event == 'SHOT') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_block[j] = ((test_data[j-1, ]$Event == 'BLOCK') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_block[j] = ((test_data[j-1, ]$Event == 'BLOCK') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_miss[j] = ((test_data[j-1, ]$Event == 'MISS') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_miss[j] = ((test_data[j-1, ]$Event == 'MISS') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_give[j] = ((test_data[j-1, ]$Event == 'GIVE') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_give[j] = ((test_data[j-1, ]$Event == 'GIVE') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_take[j] = ((test_data[j-1, ]$Event == 'TAKE') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_take[j] = ((test_data[j-1, ]$Event == 'TAKE') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_hit[j] = ((test_data[j-1, ]$Event == 'HIT') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_hit[j] = ((test_data[j-1, ]$Event == 'HIT') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_face_win[j] = ((test_data[j-1, ]$Event == 'FAC') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_face_loss[j] = ((test_data[j-1, ]$Event == 'FAC') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$is_home[j] = (test_data[j,]$Ev_Team == test_data[j,]$Home_Team)
metrics$wrist[j] = (test_data[j,]$Type == 'WRIST SHOT')
metrics$deflection[j] = (test_data[j,]$Type == 'DEFLECTION')
metrics$tip[j] = (test_data[j,]$Type == 'TIP-IN')
metrics$slap[j] = (test_data[j,]$Type == 'SLAP SHOT')
metrics$backhand[j] = (test_data[j,]$Type == 'BACKHAND')
metrics$snap[j] = (test_data[j,]$Type == 'SNAP SHOT')
metrics$wrap[j] = (test_data[j,]$Type == 'WRAP-AROUND')
metrics$goal[j] = (test_data[j,]$Event == 'GOAL')
metrics$goal_dif[j] = test_data[j, ]$Home_Score - test_data[j,]$Away_Score
if(test_data[j,]$Period == '2') {
metrics$graph_xC[j] = -test_data[j,]$xC
} else {
metrics$graph_xC[j] = test_data[j,]$xC
}
metrics$graph_yC[j] = test_data[j,]$yC
}
}
test_data = cbind(test_data, metrics)
r_drop = c("HIT", "FAC", "GIVE", "TAKE")
test_data = test_data[!test_data$Event %in% r_drop, ]
source("nhl_rink_plot.R")
team_data2 = test_data[test_data$Ev_Team == "WPG", ]
locs = data.frame("xC" = team_data2$graph_xC, "yC" = team_data2$graph_yC)
nhl_rink_plot() + geom_point(data = locs, mapping = aes(xC, yC))
test_data = read_csv("nhl_pbp_2017-10-04--2017-10-04.csv")
c_drop <- c("X1", "p1_ID", "p2_name", "p2_ID", "p3_name", "p3_ID", "awayPlayer1", "awayPlayer1_id",
"awayPlayer2", "awayPlayer2_id", "awayPlayer3", "awayPlayer3_id", "awayPlayer4", "awayPlayer4_id",
"awayPlayer5", "awayPlayer5_id", "awayPlayer6", "awayPlayer6_id", "homePlayer1", "homePlayer1_id",
"homePlayer2", "homePlayer2_id", "homePlayer3", "homePlayer3_id", "homePlayer4", "homePlayer4_id",
"homePlayer5", "homePlayer5_id", "homePlayer6", "homePlayer6_id", "Away_Goalie", "Away_Goalie_Id",
"Home_Goalie", "Home_Goalie_Id", "Home_Coach", "Away_Coach", "Away_Players", "Home_Players", "Game_Id")
event_drop <- c("PSTR", "PGSTR", "ON", "OFF", "STOP", "PENL", "PEND", "GEND")
strength_keep <- c("5x5")
test_data = test_data[(test_data$Home_Team == 'WPG') | (test_data$Away_Team == 'WPG'), ]
test_data = test_data[,!(names(test_data) %in% c_drop)]
test_data= test_data[!test_data$Event %in% event_drop, ]
test_data = test_data[test_data$Strength %in% strength_keep, ]
test_data = test_data[!is.na(test_data$xC), ]
test_data = test_data[!is.na(test_data$yC), ]
test_data = test_data[!is.na(test_data$Ev_Zone), ]
calculate_distance <- function(frame_row) {
event_dist = -1
xC = as.numeric(frame_row[17])
yC = as.numeric(frame_row[18])
if(frame_row[8] == "Off") {
event_dist = sqrt((abs(xC) - 89)^2+(yC)^2)
} else { #shot from behind center line
event_dist = sqrt((abs(xC) + 89)^2+(yC)^2)
}
return(event_dist)
}
#document this
calculate_angle <- function(frame_row) {
event_angle = 0
xC = as.numeric(frame_row[17])
yC = as.numeric(frame_row[18])
if(frame_row[8] == "Off") {
event_angle = abs(atan(yC / (89 - abs(xC))) * (180 / pi))
} else {
event_angle = abs(atan(yC / (abs(xC + 89))) * (180 / pi))
}
return(event_angle)
}
test_data$distance =  apply(test_data, 1, function(x) calculate_distance(x))
test_data$angle = apply(test_data, 1, function(x) calculate_angle(x))
num_rows = nrow(test_data)
metrics = data.frame(
xC_last = rep(NA, num_rows),
yC_last = rep(NA, num_rows),
distance_from_last = rep(NA, num_rows),
seconds_since_last = rep(NA, num_rows),
prior_team_shot = rep(NA, num_rows),
prior_team_miss = rep(NA, num_rows),
prior_team_block = rep(NA, num_rows),
prior_team_give = rep(NA, num_rows),
prior_team_take = rep(NA, num_rows),
prior_team_hit = rep(NA, num_rows),
prior_opp_shot = rep(NA, num_rows),
prior_opp_miss = rep(NA, num_rows),
prior_opp_block = rep(NA, num_rows),
prior_opp_give = rep(NA, num_rows),
prior_opp_take = rep(NA, num_rows),
prior_opp_hit = rep(NA, num_rows),
prior_face_win = rep(NA, num_rows),
prior_face_loss = rep(NA, num_rows),
is_home = rep(NA, num_rows),
wrist = rep(NA, num_rows),
deflection = rep(NA, num_rows),
tip = rep(NA, num_rows),
slap = rep(NA, num_rows),
backhand = rep(NA, num_rows),
snap = rep(NA, num_rows),
wrap = rep(NA, num_rows),
goal = rep(NA, num_rows),
goal_dif = rep(NA, num_rows),
graph_xC = rep(NA, num_rows),
graph_yC = rep(NA, num_rows))
for(j in 2:nrow(test_data)) {
if(test_data[j,]$Period == test_data[j-1,]$Period && (test_data[j,]$Event != 'FAC' && test_data[j,]$Event != 'HIT' && test_data[j,]$Event != 'GIVE' && test_data[j,]$Event != 'TAKE')) { #can only compare test_data from same game and period
metrics$xC_last[j] = test_data$xC[j-1]
metrics$yC_last[j] = test_data$yC[j-1]
metrics$distance_from_last[j] = sqrt((as.numeric(test_data[j,]$xC) - as.numeric(metrics$xC_last[j]))^2 + (as.numeric(test_data[j,]$yC) - as.numeric(metrics$yC_last[j]))^2)
metrics$seconds_since_last[j] = as.numeric(test_data[j,]$Seconds_Elapsed) - as.numeric(test_data[j-1,]$Seconds_Elapsed)
metrics$prior_team_shot[j] = ((test_data[j-1, ]$Event == 'SHOT') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_shot[j] = ((test_data[j-1, ]$Event == 'SHOT') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_block[j] = ((test_data[j-1, ]$Event == 'BLOCK') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_block[j] = ((test_data[j-1, ]$Event == 'BLOCK') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_miss[j] = ((test_data[j-1, ]$Event == 'MISS') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_miss[j] = ((test_data[j-1, ]$Event == 'MISS') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_give[j] = ((test_data[j-1, ]$Event == 'GIVE') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_give[j] = ((test_data[j-1, ]$Event == 'GIVE') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_take[j] = ((test_data[j-1, ]$Event == 'TAKE') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_take[j] = ((test_data[j-1, ]$Event == 'TAKE') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_hit[j] = ((test_data[j-1, ]$Event == 'HIT') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_hit[j] = ((test_data[j-1, ]$Event == 'HIT') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_face_win[j] = ((test_data[j-1, ]$Event == 'FAC') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_face_loss[j] = ((test_data[j-1, ]$Event == 'FAC') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$is_home[j] = (test_data[j,]$Ev_Team == test_data[j,]$Home_Team)
metrics$wrist[j] = (test_data[j,]$Type == 'WRIST SHOT')
metrics$deflection[j] = (test_data[j,]$Type == 'DEFLECTION')
metrics$tip[j] = (test_data[j,]$Type == 'TIP-IN')
metrics$slap[j] = (test_data[j,]$Type == 'SLAP SHOT')
metrics$backhand[j] = (test_data[j,]$Type == 'BACKHAND')
metrics$snap[j] = (test_data[j,]$Type == 'SNAP SHOT')
metrics$wrap[j] = (test_data[j,]$Type == 'WRAP-AROUND')
metrics$goal[j] = (test_data[j,]$Event == 'GOAL')
metrics$goal_dif[j] = test_data[j, ]$Home_Score - test_data[j,]$Away_Score
if(test_data[j,]$Period == '2') {
metrics$graph_xC[j] = -test_data[j,]$xC
} else {
metrics$graph_xC[j] = test_data[j,]$xC
}
metrics$graph_yC[j] = test_data[j,]$yC
}
}
test_data = cbind(test_data, metrics)
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
test_data$distance =  apply(test_data, 1, function(x) calculate_distance(x))
test_data$angle = apply(test_data, 1, function(x) calculate_angle(x))
num_rows = nrow(test_data)
metrics = data.frame(
xC_last = rep(NA, num_rows),
yC_last = rep(NA, num_rows),
distance_from_last = rep(NA, num_rows),
seconds_since_last = rep(NA, num_rows),
prior_team_shot = rep(NA, num_rows),
prior_team_miss = rep(NA, num_rows),
prior_team_block = rep(NA, num_rows),
prior_team_give = rep(NA, num_rows),
prior_team_take = rep(NA, num_rows),
prior_team_hit = rep(NA, num_rows),
prior_opp_shot = rep(NA, num_rows),
prior_opp_miss = rep(NA, num_rows),
prior_opp_block = rep(NA, num_rows),
prior_opp_give = rep(NA, num_rows),
prior_opp_take = rep(NA, num_rows),
prior_opp_hit = rep(NA, num_rows),
prior_face_win = rep(NA, num_rows),
prior_face_loss = rep(NA, num_rows),
is_home = rep(NA, num_rows),
wrist = rep(NA, num_rows),
deflection = rep(NA, num_rows),
tip = rep(NA, num_rows),
slap = rep(NA, num_rows),
backhand = rep(NA, num_rows),
snap = rep(NA, num_rows),
wrap = rep(NA, num_rows),
goal = rep(NA, num_rows),
goal_dif = rep(NA, num_rows),
graph_xC = rep(NA, num_rows),
graph_yC = rep(NA, num_rows))
for(j in 2:nrow(test_data)) {
if(test_data[j,]$Event != 'FAC' && test_data[j,]$Event != 'HIT' && test_data[j,]$Event != 'GIVE' && test_data[j,]$Event != 'TAKE') {
if(test_data[j,]$Period == test_data[j-1,]$Period) { #can only compare test_data from same game and period
metrics$xC_last[j] = test_data$xC[j-1]
metrics$yC_last[j] = test_data$yC[j-1]
metrics$distance_from_last[j] = sqrt((as.numeric(test_data[j,]$xC) - as.numeric(metrics$xC_last[j]))^2 + (as.numeric(test_data[j,]$yC) - as.numeric(metrics$yC_last[j]))^2)
metrics$seconds_since_last[j] = as.numeric(test_data[j,]$Seconds_Elapsed) - as.numeric(test_data[j-1,]$Seconds_Elapsed)
metrics$prior_team_shot[j] = ((test_data[j-1, ]$Event == 'SHOT') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_shot[j] = ((test_data[j-1, ]$Event == 'SHOT') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_block[j] = ((test_data[j-1, ]$Event == 'BLOCK') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_block[j] = ((test_data[j-1, ]$Event == 'BLOCK') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_miss[j] = ((test_data[j-1, ]$Event == 'MISS') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_miss[j] = ((test_data[j-1, ]$Event == 'MISS') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_give[j] = ((test_data[j-1, ]$Event == 'GIVE') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_give[j] = ((test_data[j-1, ]$Event == 'GIVE') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_take[j] = ((test_data[j-1, ]$Event == 'TAKE') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_take[j] = ((test_data[j-1, ]$Event == 'TAKE') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_team_hit[j] = ((test_data[j-1, ]$Event == 'HIT') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_opp_hit[j] = ((test_data[j-1, ]$Event == 'HIT') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
metrics$prior_face_win[j] = ((test_data[j-1, ]$Event == 'FAC') && (test_data[j-1, ]$Ev_Team == test_data[j, ]$Ev_Team))
metrics$prior_face_loss[j] = ((test_data[j-1, ]$Event == 'FAC') && (test_data[j-1, ]$Ev_Team != test_data[j, ]$Ev_Team))
}
metrics$is_home[j] = (test_data[j,]$Ev_Team == test_data[j,]$Home_Team)
metrics$wrist[j] = (test_data[j,]$Type == 'WRIST SHOT')
metrics$deflection[j] = (test_data[j,]$Type == 'DEFLECTION')
metrics$tip[j] = (test_data[j,]$Type == 'TIP-IN')
metrics$slap[j] = (test_data[j,]$Type == 'SLAP SHOT')
metrics$backhand[j] = (test_data[j,]$Type == 'BACKHAND')
metrics$snap[j] = (test_data[j,]$Type == 'SNAP SHOT')
metrics$wrap[j] = (test_data[j,]$Type == 'WRAP-AROUND')
metrics$goal[j] = (test_data[j,]$Event == 'GOAL')
metrics$goal_dif[j] = test_data[j, ]$Home_Score - test_data[j,]$Away_Score
if(test_data[j,]$Period == '2') {
metrics$graph_xC[j] = -test_data[j,]$xC
} else {
metrics$graph_xC[j] = test_data[j,]$xC
}
metrics$graph_yC[j] = test_data[j,]$yC
}
}
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
traceback()
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
t
head(scraped_data)
View(filtered_data)
View(input_data)
q
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
debugSource('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/process_data.R')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
head(input_data)
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
View(filtered_data)
View(metrics)
View(filtered_data)
View(locs)
traceback()
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
source('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/process_data.R')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
source("nhl_rink_plot.R")
library(ggiraph)
team_data2 = test_data[test_data$Ev_Team == "WPG", ]
girafe(nhl_rink_plot() + geom_point_interactive(data = team_data, mapping = aes(x = graph_xC, y = graph_yC, color = as.factor(Event), size = 3, tooltip = Type, data_id = Type)))
source("nhl_rink_plot.R")
library(ggiraph)
team_data2 = test_data[test_data$Ev_Team == "WPG", ]
girafe(nhl_rink_plot() + geom_point_interactive(data = team_data2, mapping = aes(x = graph_xC, y = graph_yC, color = as.factor(Event), size = 3, tooltip = Type, data_id = Type)))
source("nhl_rink_plot.R")
library(ggiraph)
team_data2 = test_data[test_data$Ev_Team == "WPG", ]
girafe(geom_point_interactive(data = team_data2, mapping = aes(x = graph_xC, y = graph_yC, color = as.factor(Event), size = 3, tooltip = Type, data_id = Type)))
source("nhl_rink_plot.R")
library(ggiraph)
team_data2 = test_data[test_data$Ev_Team == "WPG", ]
girafe(nhl_rink_plot() + geom_point_interactive(data = team_data2, mapping = aes(x = graph_xC, y = graph_yC, color = as.factor(Event), size = 3, tooltip = Type)))
View(team_data2)
r_drop = c("HIT", "FAC", "GIVE", "TAKE")
test_data = test_data[!test_data$Event %in% r_drop, ]
source("nhl_rink_plot.R")
library(ggiraph)
team_data2 = test_data[test_data$Ev_Team == "WPG", ]
girafe(nhl_rink_plot() + geom_point_interactive(data = team_data2, mapping = aes(x = graph_xC, y = graph_yC, color = as.factor(Event), size = 3, tooltip = Type, data_id = Type)))
source("nhl_rink_plot.R")
library(ggiraph)
team_data2 = test_data[test_data$Ev_Team == "WPG", ]
girafe((nhl_rink_plot() + geom_point_interactive(data = team_data2, mapping = aes(x = graph_xC, y = graph_yC, color = as.factor(Event), size = 3, tooltip = Type, data_id = Type))))
source("nhl_rink_plot.R")
library(ggiraph)
team_data2 = test_data[test_data$Ev_Team == "WPG", ]
girafe(ggobj = (nhl_rink_plot() + geom_point_interactive(data = team_data2, mapping = aes(x = graph_xC, y = graph_yC, color = as.factor(Event), size = 3, tooltip = Type, data_id = Type))))
source("nhl_rink_plot.R")
library(ggiraph)
team_data2 = test_data[test_data$Ev_Team == "WPG", ]
girafe(ggobj = (nhl_rink_plot() + geom_point_interactive(data = team_data2, mapping = aes(x = graph_xC, y = graph_yC, color = as.factor(Event), size = 2, tooltip = Type, data_id = Type))))
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
source('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/process_data.R')
source('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/process_data.R')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp()
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
View(processed_data)
View(team_data)
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
source('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/process_data.R')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
.Rprofile
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
shiny::runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
shiny::runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp('Documents/ADS/capstone-project-mconcan/Capstone_Project')
file.edit(.Rprofile)
file.edit(".Rprofile")
setwd("Documents/ADS/capstone-project-mconcan/Capstone_Project")
file.edit(".Rprofile")
source('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/.Rprofile')
shiny::runApp()
reticulate::source_python('~/Documents/ADS/capstone-project-mconcan/Capstone_Project/scrape_game.py')
runApp()
